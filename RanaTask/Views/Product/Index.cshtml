@model IEnumerable<ProductPortal.Core.Entities.Concrete.Product>
@{
    ViewData["Title"] = "Ürün Yönetimi";
    Layout = "~/Views/Shared/Layout.cshtml";
}

<div class="row">
    <div class="col-12 grid-margin">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h4 class="card-title">Ürün Listesi</h4>
                    <button type="button" class="btn btn-primary" onclick="window.location.href='@Url.Action("Create", "Product")'">
                        <i class="mdi mdi-plus"></i> Yeni Ürün Ekle
                    </button>
                </div>

                <!-- Ürün Tablosu -->
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Resim</th>
                                <th>Ürün Adı</th>
                                <th>Açıklama</th>
                                <th>Kod</th>
                                <th>Fiyat</th>
                                <th>Stok</th>
                                <th>Eklenme Tarihi</th>
                                <th>İşlemler</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in Model)
                            {
                                <tr>
                                    <td>
                                        @if (!string.IsNullOrEmpty(product.ImageURL))
                                        {
                                            <img src="@Url.Content(product.ImageURL)" alt="@product.Name" class="product-thumbnail" />
                                        }
                                        else
                                        {
                                            <span>Resim yok</span>
                                        }
                                    </td>
                                    <td>@product.Name</td>
                                    <td>@product.Description</td>
                                    <td>@product.Code</td>
                                    <td>@product.Price.ToString("0.00") ₺</td>
                                    <td>@product.Stock</td>
                                    <td>@product.CreatedDate.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        <a href="@Url.Action("Edit", "Product", new { id = product.Id })" class="btn btn-info btn-sm">
                                            <i class="mdi mdi-pencil"></i>
                                        </a>
                                        <form asp-action="Delete" asp-controller="Product" method="post" style="display:inline;" onsubmit="return confirm('Bu ürünü silmek istediğinizden emin misiniz?');">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="id" value="@product.Id" />
                                            <button type="submit" class="btn btn-danger btn-sm">
                                                <i class="mdi mdi-delete"></i>
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>



































@* @{
    ViewData["Title"] = "Ürün Yönetimi";
    Layout = "~/Views/Shared/Layout.cshtml";
}

<div class="row">
    <div class="col-12 grid-margin">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h4 class="card-title">Ürün Listesi</h4>
                    <button type="button" class="btn btn-primary" onclick="window.location.href='@Url.Action("Create", "Product")'">
                        <i class="mdi mdi-plus"></i> Yeni Ürün Ekle
                    </button>
                </div>

                <!-- Ürün Tablosu -->
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Image URL</th>
                                <th>Ürün Adı</th>
                                <th>Açıklama</th>
                                <th>Kod</th>
                                <th>Fiyat</th>
                                <th>Stok</th>
                                <th>Eklenme Tarihi</th>
                                <th>İşlemler</th>
                            </tr>
                        </thead>
                        <tbody id="productTableBody">
                            <!-- Ürünler JavaScript ile yüklenecek -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Ürün Modal -->
<div class="modal fade" id="productModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productModalLabel">Yeni Ürün</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="productForm">
                    @Html.AntiForgeryToken()

                    <input type="hidden" id="Id" name="Id">
                    <div class="form-group">
                        <label>Resim URL</label>
                        <input type="text" class="form-control" id="ImageURL" name="ImageURL" required>
                    </div>
                    <div class="form-group">
                        <label>Ürün Adı</label>
                        <input type="text" class="form-control" id="Name" name="Name" required>
                    </div>
                    <div class="form-group">
                        <label>Açıklama</label>
                        <input type="text" class="form-control" id="Description" name="Description" required>
                    </div>
                    <div class="form-group">
                        <label>Ürün Kodu</label>
                        <input type="text" class="form-control" id="Code" name="Code" required>
                    </div>
                    <div class="form-group">
                        <label>Fiyat</label>
                        <input type="number" class="form-control" id="Price" name="Price" step="0.01" required>
                    </div>
                    <div class="form-group">
                        <label>Stok</label>
                        <input type="number" class="form-control" id="Stock" name="Stock" required>
                    </div>
                    <div class="form-group">
                        <label>Eklenme Tarihi</label>
                        <input type="datetime-local" class="form-control" id="CreatedDate" name="CreatedDate" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" onclick="saveProduct()">Kaydet</button>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="~/template/assets/js/hoverable-collapse.js"></script>
@section Scripts {
    <script>
        // Sayfa yüklendiğinde ürünleri getir
        $(document).ready(function () {
            loadProducts();
        });

        // Ürünleri getir
        async function loadProducts() {
            try {
                const response = await fetch('/Product/GetProducts', {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`,
                        'Accept': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API Response:', result); // Debug için

                if (result.success && result.data) {
                    renderProducts(result.data);
                } else {
                    console.error('API error:', result.message);
                    throw new Error(result.message || 'Ürünler yüklenemedi');
                }
            } catch (error) {
                console.error('Load products error:', error);
                alert('Ürünler yüklenirken bir hata oluştu');
            }
        }
        // Ürünleri tabloya ekle
        function renderProducts(products) {
            const tbody = document.getElementById('productTableBody');
            tbody.innerHTML = '';

            if (!products || products.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="text-center">Henüz ürün bulunmamaktadır</td></tr>';
                return;
            }

            products.forEach(product => {
                const row = `
                    <tr>
                        <td>${product.imageURL || ''}</td>
                        <td>${product.name || ''}</td>
                        <td>${product.description || ''}</td>
                        <td>${product.code || ''}</td>
                        <td>${(product.price || 0).toFixed(2)} ₺</td>
                        <td>${product.stock || 0}</td>
                        <td>${product.createdDate ? new Date(product.createdDate).toLocaleDateString() : ''}</td>
                        <td>
                            <button class="btn btn-info btn-sm" onclick="editProduct(${product.id})">
                                <i class="mdi mdi-pencil"></i>
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="deleteProduct(${product.id})">
                                <i class="mdi mdi-delete"></i>
                            </button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        // Yeni ürün modalını göster
        function showAddModal() {
            document.getElementById('productForm').reset();
            document.getElementById('id').value = '';
            document.getElementById('productModalLabel').textContent = 'Yeni Ürün';

            window.location.href = '/Product/Create';
        }

        // Ürün düzenleme
        async function editProduct(id) {
            try {
                const response = await fetch(`/Product/GetProduct/${id}`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`,
                        'Accept': 'application/json'
                    }
                });

                if (response.status === 404) {
                    console.warn(`Ürün ID'si ${id} bulunamadı.`);
                    alert('Belirtilen ürün mevcut değil veya silinmiş olabilir. Lütfen başka bir ürün seçin veya yeni bir ürün ekleyin.');
                    return;
                }

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const result = await response.json();

                if (result.success && result.data) {
                    const product = result.data;
                    $('#productModal').modal('show');
                    fillProductForm(product);

                }else {
                    throw new Error(result.message || 'Ürün bilgileri alınamadı');
                }

            } catch (error) {
                console.error('Edit error:', error);
                alert('Ürün bilgileri yüklenirken bir hata oluştu: ' + error.message);
            }
        }



        // Ürün kaydetme
        async function saveProduct(event) {
            if (event) {
                event.preventDefault();
            }

            try {
                const productId = document.getElementById('Id').value.trim();
                const name = document.getElementById('Name').value.trim();
                const code = document.getElementById('Code').value.trim();
                const price = parseFloat(document.getElementById('Price').value);
                const stock = parseInt(document.getElementById('Stock').value, 10);
                const imageURL = document.getElementById('ImageURL').value.trim();
                const description = document.getElementById('Description').value.trim();
                const createdDate = document.getElementById('CreatedDate').value;

                // Boş veya geçersiz değer kontrolü
                if (!name) {
                    throw new Error('Ürün adı zorunludur.');
                }
                if (!code) {
                    throw new Error('Ürün kodu zorunludur.');
                }
                if (isNaN(price) || price <= 0) {
                    throw new Error('Fiyat sıfırdan büyük olmalıdır.');
                }
                if (isNaN(stock) || stock < 0) {
                    throw new Error('Stok miktarı sıfır veya daha büyük olmalıdır.');
                }
                if (!imageURL) {
                    throw new Error('Resim URL zorunludur.');
                }
                if (!description) {
                    throw new Error('Açıklama zorunludur.');
                }

                const formData = {
                    id: productId,
                    name: name,
                    code: code,
                    price: price,
                    stock: stock,
                    imageURL: imageURL,
                    description: description,
                    createdDate: createdDate ? new Date(createdDate).toISOString() : null,
                    isActive: true
                };

                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenElement) {
                    throw new Error('CSRF token bulunamadı. Lütfen sayfayı yeniden yükleyin.');
                }

                const response = await fetch('/Product/Edit', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`,
                        'RequestVerificationToken': tokenElement.value
                    },
                    body: JSON.stringify(formData)
                });
                console.log('API Response:', response);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const result = await response.json();
                console.log('API Result:', result);


                if (result.success) {
                    $('#productModal').modal('hide');
                    loadProducts();
                    alert('Ürün başarıyla güncellendi');
                } else {
                    let errorMessage = result.message;
                    if (result.errors && result.errors.length > 0) {
                        errorMessage += '\nHatalar:\n' + result.errors.join('\n');
                    }
                    throw new Error(errorMessage);
                }
            } catch (error) {
                console.error('Save error:', error);
                alert('Güncelleme hatası: ' + error.message);
            }
        }




        // Ürün silme
        async function deleteProduct(id) {
            if (confirm('Bu ürünü silmek istediğinizden emin misiniz?')) {
                try {
                    const response = await fetch(`/api/products/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('token')}`
                        }
                    });

                    if (response.ok) {
                        loadProducts();
                        alert('Ürün silindi!');
                    } else {
                        alert('Silme işlemi başarısız!');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Bir hata oluştu!');
                }
            }
        }
        function fillProductForm(product) {
            document.getElementById('Id').value = product.id;
            document.getElementById('Name').value = product.name;
            document.getElementById('Code').value = product.code;
            document.getElementById('Price').value = product.price;
            document.getElementById('Stock').value = product.stock;
            document.getElementById('ImageURL').value = product.imageURL; 
            document.getElementById('Description').value = product.description; 
            document.getElementById('CreatedDate').value = product.createdDate ? new Date(product.createdDate).toISOString().slice(0, 16) : ''; // Eklenme Tarihi
            $('#productModal').modal('show');
        }


    </script>
} *@