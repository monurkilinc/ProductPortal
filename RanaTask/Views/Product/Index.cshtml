@{
    ViewData["Title"] = "Ürün Yönetimi";
    Layout = "~/Views/Shared/Layout.cshtml"; 
}

<div class="row">
    <div class="col-12 grid-margin">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h4 class="card-title">Ürün Listesi</h4>
                    <button type="button" class="btn btn-primary" onclick="showAddModal()">
                        <i class="mdi mdi-plus"></i> Yeni Ürün
                    </button>
                </div>

                <!-- Ürün Tablosu -->
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Ürün Adı</th>
                                <th>Kod</th>
                                <th>Fiyat</th>
                                <th>Stok</th>
                                <th>Oluşturma Tarihi</th>
                                <th>İşlemler</th>
                            </tr>
                        </thead>
                        <tbody id="productTableBody">
                            <!-- Ürünler JavaScript ile yüklenecek -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Ürün Modal -->
<div class="modal fade" id="productModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productModalLabel">Yeni Ürün</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="productForm">
                    <input type="hidden" id="productId">
                    <div class="form-group">
                        <label>Ürün Adı</label>
                        <input type="text" class="form-control" id="productName" value="Name" required>
                    </div>
                    <div class="form-group">
                        <label>Ürün Kodu</label>
                        <input type="text" class="form-control" id="productCode" value="Code" required>
                    </div>
                    <div class="form-group">
                        <label>Fiyat</label>
                        <input type="number" class="form-control" id="productPrice" step="0.01" value="Price" required>
                    </div>
                    <div class="form-group">
                        <label>Stok</label>
                        <input type="number" class="form-control" id="productStock" value="Stock" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">İptal</button>
                <button type="submit" class="btn btn-primary" onclick="saveProduct()">Kaydet</button>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="~/template/assets/js/hoverable-collapse.js"></script>
@section Scripts {
    <script>
        // Sayfa yüklendiğinde ürünleri getir
        $(document).ready(function () {
            loadProducts();
        });

        // Ürünleri getir
        async function loadProducts() {
            try {
                const response = await fetch('/api/products', {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    renderProducts(result.data);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Ürünler yüklenirken bir hata oluştu!');
            }
        }

        // Ürünleri tabloya ekle
        function renderProducts(products) {
            const tbody = document.getElementById('productTableBody');
            tbody.innerHTML = '';

            products.forEach(product => {
                tbody.innerHTML += `
                    <tr>
                        <td>${product.name}</td>
                        <td>${product.code}</td>
                        <td>${product.price.toFixed(2)} ₺</td>
                        <td>${product.stock}</td>
                        <td>${new Date(product.createdDate).toLocaleDateString()}</td>
                        <td>
                            <button class="btn btn-info btn-sm" onclick="editProduct(${product.id})">
                                <i class="mdi mdi-pencil"></i>
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="deleteProduct(${product.id})">
                                <i class="mdi mdi-delete"></i>
                            </button>
                        </td>
                    </tr>
                `;
            });
        }

        // Yeni ürün modalını göster
        function showAddModal() {
            document.getElementById('productForm').reset();
            document.getElementById('productId').value = '';
            document.getElementById('productModalLabel').textContent = 'Yeni Ürün';
            $('#productModal').modal('show');
        }

        // Ürün düzenleme
        async function editProduct(id) {
            try {
                const response = await fetch(`/api/products/${id}`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    const product = result.data;

                    document.getElementById('productId').value = product.id;
                    document.getElementById('productName').value = product.name;
                    document.getElementById('productCode').value = product.code;
                    document.getElementById('productPrice').value = product.price;
                    document.getElementById('productStock').value = product.stock;

                    document.getElementById('productModalLabel').textContent = 'Ürün Düzenle';
                    $('#productModal').modal('show');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Ürün bilgileri yüklenirken bir hata oluştu!');
            }
        }

        // Ürün kaydetme
        async function saveProduct() {
            const productId = document.getElementById('productId').value;
            const data = {
                id: productId ? parseInt(productId) : 0,
                name: document.getElementById('productName').value,
                code: document.getElementById('productCode').value,
                price: parseFloat(document.getElementById('productPrice').value),
                stock: parseInt(document.getElementById('productStock').value)
            };

            const url = productId ? `/api/products/${productId}` : '/api/products';
            const method = productId ? 'PUT' : 'POST';

            try {
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    $('#productModal').modal('hide');
                    loadProducts();
                    alert(productId ? 'Ürün güncellendi!' : 'Ürün eklendi!');
                } else {
                    alert('İşlem başarısız!');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Bir hata oluştu!');
            }
        }

        // Ürün silme
        async function deleteProduct(id) {
            if (confirm('Bu ürünü silmek istediğinizden emin misiniz?')) {
                try {
                    const response = await fetch(`/api/products/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('token')}`
                        }
                    });

                    if (response.ok) {
                        loadProducts();
                        alert('Ürün silindi!');
                    } else {
                        alert('Silme işlemi başarısız!');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Bir hata oluştu!');
                }
            }
        }
    </script>
}